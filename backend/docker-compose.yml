version: '3.8'
services:
  mysqldb:
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "750m"
    image: mysql:8.0.30
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql-db-data:/var/lib/mysql
      #- ./db:/docker-entrypoint-initdb.d
    restart: always
    networks:
      - spring-backend-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 3

  mysql-exporter:
    image: prom/mysqld-exporter
    container_name: mysql-exporter
    restart: on-failure
    environment:
      MYSQL_PORT: ${MYSQL_PORT}
    command:
      - --config.my-cnf=/cfg/.my.cnf
      - --mysqld.address=mysqldb:3306
    volumes:
      - "./.my.cnf:/cfg/.my.cnf"
    depends_on:
      mysqldb:
        condition: service_healthy
    networks:
      - spring-backend-network

  moonkeyeu-core-api:
    build: ./moonkeyeu-core-api
    deploy:
      resources:
        limits:
          cpus: "1.3"
          memory: "950m"
    container_name: moonkeyeu-core-api-container
    restart: on-failure
    environment:
        MYSQL_HOST: mysqldb
        MYSQL_DATABASE: ${MYSQL_DATABASE}
        MYSQL_PORT: ${MYSQL_PORT}
        MYSQL_USER: ${MYSQL_USER}
        MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        MAIL_HOST: ${MAIL_HOST}
        MAIL_PORT: ${MAIL_PORT}
        MAIL_USERNAME: ${MAIL_USERNAME}
        MAIL_PASSWORD: ${MAIL_PASSWORD}
        MAIL_SENDER: ${MAIL_SENDER}
        GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
        GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
        NASA_APOD_KEY: ${NASA_APOD_KEY}
    volumes:
      - ./jwt-keys:/app/jwt-keys
    ports:
      - "8080:8080"
    depends_on:
      mysqldb:
        condition: service_healthy
    networks:
      - spring-backend-network

  moonkeyeu-etl-api:
    build: ./moonkeyeu-etl-api
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "800m"
    container_name: moonkeyeu-etl-api-container
    restart: on-failure
    environment:
      MYSQL_HOST: mysqldb
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      S3_REGION: ${S3_REGION}
      S3_BUCKET: ${S3_BUCKET}
      S3_BUCKET_ROOT: ${S3_BUCKET_ROOT}
      INPUT_RAW_DIR: /app/raw_dataset
      OUTPUT_CLEAN_DIR: /app/clean_dataset
      DB_IMAGES_DIR: /app/db-images
    volumes:
      - ./etl-data/raw-dataset:/app/raw_dataset
      - ./etl-data/clean-dataset:/app/clean_dataset
      - /home/moonkeyeu/.aws:/root/.aws
      #- ~/.aws:/root/.aws
    depends_on:
      - mysqldb
      - moonkeyeu-core-api
    networks:
      - spring-backend-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    #command: certonly --webroot -w /var/www/certbot --keep-until-expiring --email ${CERTBOT_EMAIL} -d ${CERTBOT_DOMAIN_BACKEND} --agree-tos
    #command: renew --dry-run
    #command: renew --force-renewal
    command: renew

  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus-container
    depends_on:
      - moonkeyeu-core-api
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    deploy:
      resources:
        limits:
          cpus: "0.6"
          memory: "100m"
    networks:
      - spring-backend-network

  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana-container
    ports:
      - "3000:3000"
    environment:
      - GF_SERVER_ROOT_URL=${GF_SERVER_ROOT_URL}
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    depends_on:
      - moonkeyeu-core-api
    restart: unless-stopped
    volumes:
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    deploy:
      resources:
        limits:
          cpus: "0.6"
          memory: "140m"
    networks:
      - spring-backend-network

networks:
  spring-backend-network:
    driver: bridge
volumes:
  mysql-db-data:
    external: true
  etl-data:
    driver: local
